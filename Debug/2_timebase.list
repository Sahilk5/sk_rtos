
2_timebase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f10  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080010a8  080010a8  000110a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001124  08001124  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001124  08001124  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001124  08001124  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001128  08001128  00011128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800112c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001194  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001194  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001349  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065c  00000000  00000000  000213e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00021c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd16  00000000  00000000  00021d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000265b  00000000  00000000  00031a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055454  00000000  00000000  000340c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008951d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bd4  00000000  00000000  00089570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001090 	.word	0x08001090

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08001090 	.word	0x08001090

080001d8 <led_init>:
#include "led.h"

#define GPIOAEN	(1U<<0)
#define LED_PIN (1U<<5)
void led_init(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/*  Enable clock for PORT A in AHB bus */
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <led_init+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <led_init+0x34>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set led pin as output*/
	GPIOA->MODER |= (1U<<10);
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <led_init+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <led_init+0x38>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <led_init+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <led_init+0x38>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <led_on>:

void led_on(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	/* Set led pin high */
	GPIOA->ODR |= LED_PIN;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <led_on+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <led_on+0x1c>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000

08000234 <led_off>:

void led_off(void) {
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	/* Set led pin off */
	GPIOA->ODR &= ~LED_PIN;
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <led_off+0x1c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <led_off+0x1c>)
 800023e:	f023 0320 	bic.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <main>:
#include "led.h"
#include "uart.h"
#include "timebase.h"

int main(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	led_init();
 8000258:	f7ff ffbe 	bl	80001d8 <led_init>
	uart_tx_init();
 800025c:	f000 f934 	bl	80004c8 <uart_tx_init>
	timebase_init();
 8000260:	f000 f8fe 	bl	8000460 <timebase_init>

	printf("Welcome to the RTOS!\n");
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <main+0x2c>)
 8000266:	f000 fa83 	bl	8000770 <puts>
	while(1) {
		led_on();
 800026a:	f7ff ffd3 	bl	8000214 <led_on>
		delay_s(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f000 f8ac 	bl	80003cc <delay_s>
		led_off();
 8000274:	f7ff ffde 	bl	8000234 <led_off>
		delay_s(1);;
 8000278:	2001      	movs	r0, #1
 800027a:	f000 f8a7 	bl	80003cc <delay_s>
		led_on();
 800027e:	e7f4      	b.n	800026a <main+0x16>
 8000280:	080010a8 	.word	0x080010a8

08000284 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	e00a      	b.n	80002ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000296:	f3af 8000 	nop.w
 800029a:	4601      	mov	r1, r0
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	b2ca      	uxtb	r2, r1
 80002a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3301      	adds	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
 80002ac:	697a      	ldr	r2, [r7, #20]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	dbf0      	blt.n	8000296 <_read+0x12>
  }

  return len;
 80002b4:	687b      	ldr	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	60ba      	str	r2, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f8e9 	bl	80004b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
  }
  return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <_close>:

int _close(int file)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800031e:	605a      	str	r2, [r3, #4]
  return 0;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <_isatty>:

int _isatty(int file)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000336:	2301      	movs	r3, #1
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
	...

08000360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000368:	4a14      	ldr	r2, [pc, #80]	; (80003bc <_sbrk+0x5c>)
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <_sbrk+0x60>)
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000374:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <_sbrk+0x64>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d102      	bne.n	8000382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <_sbrk+0x64>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <_sbrk+0x68>)
 8000380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <_sbrk+0x64>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	693a      	ldr	r2, [r7, #16]
 800038c:	429a      	cmp	r2, r3
 800038e:	d207      	bcs.n	80003a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000390:	f000 f94e 	bl	8000630 <__errno>
 8000394:	4603      	mov	r3, r0
 8000396:	220c      	movs	r2, #12
 8000398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800039a:	f04f 33ff 	mov.w	r3, #4294967295
 800039e:	e009      	b.n	80003b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <_sbrk+0x64>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003a6:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <_sbrk+0x64>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <_sbrk+0x64>)
 80003b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20020000 	.word	0x20020000
 80003c0:	00000400 	.word	0x00000400
 80003c4:	20000084 	.word	0x20000084
 80003c8:	200000a0 	.word	0x200000a0

080003cc <delay_s>:

volatile uint32_t g_curr_tick;
volatile uint32_t tick_frq = 1;
volatile uint32_t g_curr_tick_p;

void delay_s(uint32_t delay){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint32_t tick_start = get_tick();
 80003d4:	f000 f82e 	bl	8000434 <get_tick>
 80003d8:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY) {
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003e4:	d004      	beq.n	80003f0 <delay_s+0x24>
		wait += (uint32_t)(tick_frq);
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <delay_s+0x40>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	60fb      	str	r3, [r7, #12]
	}

	while((get_tick() - tick_start) < wait);
 80003f0:	bf00      	nop
 80003f2:	f000 f81f 	bl	8000434 <get_tick>
 80003f6:	4602      	mov	r2, r0
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d8f7      	bhi.n	80003f2 <delay_s+0x26>
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000000 	.word	0x20000000

08000410 <tick_increment>:

void tick_increment(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	g_curr_tick += tick_frq;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <tick_increment+0x1c>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <tick_increment+0x20>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4413      	add	r3, r2
 800041e:	4a04      	ldr	r2, [pc, #16]	; (8000430 <tick_increment+0x20>)
 8000420:	6013      	str	r3, [r2, #0]
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000
 8000430:	20000088 	.word	0x20000088

08000434 <get_tick>:

uint32_t get_tick() {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <get_tick+0x24>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a06      	ldr	r2, [pc, #24]	; (800045c <get_tick+0x28>)
 8000442:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000444:	b662      	cpsie	i
}
 8000446:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <get_tick+0x28>)
 800044a:	681b      	ldr	r3, [r3, #0]
}
 800044c:	4618      	mov	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000088 	.word	0x20000088
 800045c:	2000008c 	.word	0x2000008c

08000460 <timebase_init>:

void timebase_init(void) {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	/* Reload the timer with no. of cycles per second*/
	SysTick->LOAD = ONE_SEC_LOAD - 1;
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <timebase_init+0x3c>)
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <timebase_init+0x40>)
 8000468:	605a      	str	r2, [r3, #4]
	/* Clear systick current value register */
	SysTick->VAL = 0;
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <timebase_init+0x3c>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
	/* Select internal clock source */
	SysTick->CTRL = CTRL_CLKSRC;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <timebase_init+0x3c>)
 8000472:	2204      	movs	r2, #4
 8000474:	601a      	str	r2, [r3, #0]
	/* Enable interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <timebase_init+0x3c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <timebase_init+0x3c>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	6013      	str	r3, [r2, #0]
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <timebase_init+0x3c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <timebase_init+0x3c>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800048e:	b662      	cpsie	i
}
 8000490:	bf00      	nop
	/* Enable global interrupts */
	__enable_irq();
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000e010 	.word	0xe000e010
 80004a0:	00f423ff 	.word	0x00f423ff

080004a4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	tick_increment();
 80004a8:	f7ff ffb2 	bl	8000410 <tick_increment>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f84f 	bl	800055c <uart_write>
	return ch;
 80004be:	687b      	ldr	r3, [r7, #4]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <uart_tx_init>:

void uart_tx_init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* Enable clock for PORT A in AHB bus */
	RCC->AHB1ENR |= GPIOAEN;
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <uart_tx_init+0x84>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a1e      	ldr	r2, [pc, #120]	; (800054c <uart_tx_init+0x84>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30

	/* Configure GPIO pins for UART in alternate funccion mode */
	GPIOA->MODER &= ~(1U<<4);
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <uart_tx_init+0x88>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <uart_tx_init+0x88>)
 80004de:	f023 0310 	bic.w	r3, r3, #16
 80004e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <uart_tx_init+0x88>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <uart_tx_init+0x88>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7*/
	GPIOA->AFR[0] |= (1U<<8);
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <uart_tx_init+0x88>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a16      	ldr	r2, [pc, #88]	; (8000550 <uart_tx_init+0x88>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <uart_tx_init+0x88>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <uart_tx_init+0x88>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <uart_tx_init+0x88>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a10      	ldr	r2, [pc, #64]	; (8000550 <uart_tx_init+0x88>)
 800050e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000512:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <uart_tx_init+0x88>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <uart_tx_init+0x88>)
 800051a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800051e:	6213      	str	r3, [r2, #32]

	/* Enable clock access to USART*/
	RCC->APB1ENR |= UART2EN;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <uart_tx_init+0x84>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <uart_tx_init+0x84>)
 8000526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40

	/* Configure baudrate */
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 800052c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000530:	4808      	ldr	r0, [pc, #32]	; (8000554 <uart_tx_init+0x8c>)
 8000532:	f000 f82b 	bl	800058c <uart_set_baudrate>

	/* Configure transfer direction*/
	USART2->CR1 = CR1_TE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <uart_tx_init+0x90>)
 8000538:	2208      	movs	r2, #8
 800053a:	60da      	str	r2, [r3, #12]

	/* Enable UART module*/
	USART2->CR1 |= CR1_UE;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <uart_tx_init+0x90>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <uart_tx_init+0x90>)
 8000542:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000
 8000554:	00f42400 	.word	0x00f42400
 8000558:	40004400 	.word	0x40004400

0800055c <uart_write>:

static void uart_write(int ch) {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	/* Make sure the tx data register is empty */
	while(!(USART2->SR & SR_TXE));
 8000564:	bf00      	nop
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <uart_write+0x2c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f9      	beq.n	8000566 <uart_write+0xa>

	/* Write data to register */
	USART2->DR = (ch & 0xFF);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <uart_write+0x2c>)
 8000576:	b2db      	uxtb	r3, r3
 8000578:	6053      	str	r3, [r2, #4]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40004400 	.word	0x40004400

0800058c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f80b 	bl	80005b4 <compute_uart_bd>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <uart_set_baudrate+0x24>)
 80005a4:	609a      	str	r2, [r3, #8]
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40004400 	.word	0x40004400

080005b4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	return (periph_clk + (baudrate/2U))/baudrate;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	085a      	lsrs	r2, r3, #1
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	441a      	add	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	b29b      	uxth	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 f817 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fe21 	bl	8000254 <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000620:	0800112c 	.word	0x0800112c
  ldr r2, =_sbss
 8000624:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000628:	200000a0 	.word	0x200000a0

0800062c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>
	...

08000630 <__errno>:
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <__errno+0x8>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4d0d      	ldr	r5, [pc, #52]	; (8000674 <__libc_init_array+0x38>)
 8000640:	4c0d      	ldr	r4, [pc, #52]	; (8000678 <__libc_init_array+0x3c>)
 8000642:	1b64      	subs	r4, r4, r5
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	2600      	movs	r6, #0
 8000648:	42a6      	cmp	r6, r4
 800064a:	d109      	bne.n	8000660 <__libc_init_array+0x24>
 800064c:	4d0b      	ldr	r5, [pc, #44]	; (800067c <__libc_init_array+0x40>)
 800064e:	4c0c      	ldr	r4, [pc, #48]	; (8000680 <__libc_init_array+0x44>)
 8000650:	f000 fd1e 	bl	8001090 <_init>
 8000654:	1b64      	subs	r4, r4, r5
 8000656:	10a4      	asrs	r4, r4, #2
 8000658:	2600      	movs	r6, #0
 800065a:	42a6      	cmp	r6, r4
 800065c:	d105      	bne.n	800066a <__libc_init_array+0x2e>
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f855 3b04 	ldr.w	r3, [r5], #4
 8000664:	4798      	blx	r3
 8000666:	3601      	adds	r6, #1
 8000668:	e7ee      	b.n	8000648 <__libc_init_array+0xc>
 800066a:	f855 3b04 	ldr.w	r3, [r5], #4
 800066e:	4798      	blx	r3
 8000670:	3601      	adds	r6, #1
 8000672:	e7f2      	b.n	800065a <__libc_init_array+0x1e>
 8000674:	08001124 	.word	0x08001124
 8000678:	08001124 	.word	0x08001124
 800067c:	08001124 	.word	0x08001124
 8000680:	08001128 	.word	0x08001128

08000684 <memset>:
 8000684:	4402      	add	r2, r0
 8000686:	4603      	mov	r3, r0
 8000688:	4293      	cmp	r3, r2
 800068a:	d100      	bne.n	800068e <memset+0xa>
 800068c:	4770      	bx	lr
 800068e:	f803 1b01 	strb.w	r1, [r3], #1
 8000692:	e7f9      	b.n	8000688 <memset+0x4>

08000694 <_puts_r>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	460e      	mov	r6, r1
 8000698:	4605      	mov	r5, r0
 800069a:	b118      	cbz	r0, 80006a4 <_puts_r+0x10>
 800069c:	6983      	ldr	r3, [r0, #24]
 800069e:	b90b      	cbnz	r3, 80006a4 <_puts_r+0x10>
 80006a0:	f000 fa48 	bl	8000b34 <__sinit>
 80006a4:	69ab      	ldr	r3, [r5, #24]
 80006a6:	68ac      	ldr	r4, [r5, #8]
 80006a8:	b913      	cbnz	r3, 80006b0 <_puts_r+0x1c>
 80006aa:	4628      	mov	r0, r5
 80006ac:	f000 fa42 	bl	8000b34 <__sinit>
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <_puts_r+0xd0>)
 80006b2:	429c      	cmp	r4, r3
 80006b4:	d120      	bne.n	80006f8 <_puts_r+0x64>
 80006b6:	686c      	ldr	r4, [r5, #4]
 80006b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ba:	07db      	lsls	r3, r3, #31
 80006bc:	d405      	bmi.n	80006ca <_puts_r+0x36>
 80006be:	89a3      	ldrh	r3, [r4, #12]
 80006c0:	0598      	lsls	r0, r3, #22
 80006c2:	d402      	bmi.n	80006ca <_puts_r+0x36>
 80006c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006c6:	f000 fad3 	bl	8000c70 <__retarget_lock_acquire_recursive>
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	0719      	lsls	r1, r3, #28
 80006ce:	d51d      	bpl.n	800070c <_puts_r+0x78>
 80006d0:	6923      	ldr	r3, [r4, #16]
 80006d2:	b1db      	cbz	r3, 800070c <_puts_r+0x78>
 80006d4:	3e01      	subs	r6, #1
 80006d6:	68a3      	ldr	r3, [r4, #8]
 80006d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006dc:	3b01      	subs	r3, #1
 80006de:	60a3      	str	r3, [r4, #8]
 80006e0:	bb39      	cbnz	r1, 8000732 <_puts_r+0x9e>
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	da38      	bge.n	8000758 <_puts_r+0xc4>
 80006e6:	4622      	mov	r2, r4
 80006e8:	210a      	movs	r1, #10
 80006ea:	4628      	mov	r0, r5
 80006ec:	f000 f848 	bl	8000780 <__swbuf_r>
 80006f0:	3001      	adds	r0, #1
 80006f2:	d011      	beq.n	8000718 <_puts_r+0x84>
 80006f4:	250a      	movs	r5, #10
 80006f6:	e011      	b.n	800071c <_puts_r+0x88>
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <_puts_r+0xd4>)
 80006fa:	429c      	cmp	r4, r3
 80006fc:	d101      	bne.n	8000702 <_puts_r+0x6e>
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	e7da      	b.n	80006b8 <_puts_r+0x24>
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <_puts_r+0xd8>)
 8000704:	429c      	cmp	r4, r3
 8000706:	bf08      	it	eq
 8000708:	68ec      	ldreq	r4, [r5, #12]
 800070a:	e7d5      	b.n	80006b8 <_puts_r+0x24>
 800070c:	4621      	mov	r1, r4
 800070e:	4628      	mov	r0, r5
 8000710:	f000 f888 	bl	8000824 <__swsetup_r>
 8000714:	2800      	cmp	r0, #0
 8000716:	d0dd      	beq.n	80006d4 <_puts_r+0x40>
 8000718:	f04f 35ff 	mov.w	r5, #4294967295
 800071c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800071e:	07da      	lsls	r2, r3, #31
 8000720:	d405      	bmi.n	800072e <_puts_r+0x9a>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	059b      	lsls	r3, r3, #22
 8000726:	d402      	bmi.n	800072e <_puts_r+0x9a>
 8000728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800072a:	f000 faa2 	bl	8000c72 <__retarget_lock_release_recursive>
 800072e:	4628      	mov	r0, r5
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	2b00      	cmp	r3, #0
 8000734:	da04      	bge.n	8000740 <_puts_r+0xac>
 8000736:	69a2      	ldr	r2, [r4, #24]
 8000738:	429a      	cmp	r2, r3
 800073a:	dc06      	bgt.n	800074a <_puts_r+0xb6>
 800073c:	290a      	cmp	r1, #10
 800073e:	d004      	beq.n	800074a <_puts_r+0xb6>
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	6022      	str	r2, [r4, #0]
 8000746:	7019      	strb	r1, [r3, #0]
 8000748:	e7c5      	b.n	80006d6 <_puts_r+0x42>
 800074a:	4622      	mov	r2, r4
 800074c:	4628      	mov	r0, r5
 800074e:	f000 f817 	bl	8000780 <__swbuf_r>
 8000752:	3001      	adds	r0, #1
 8000754:	d1bf      	bne.n	80006d6 <_puts_r+0x42>
 8000756:	e7df      	b.n	8000718 <_puts_r+0x84>
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	250a      	movs	r5, #10
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	6022      	str	r2, [r4, #0]
 8000760:	701d      	strb	r5, [r3, #0]
 8000762:	e7db      	b.n	800071c <_puts_r+0x88>
 8000764:	080010e4 	.word	0x080010e4
 8000768:	08001104 	.word	0x08001104
 800076c:	080010c4 	.word	0x080010c4

08000770 <puts>:
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <puts+0xc>)
 8000772:	4601      	mov	r1, r0
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	f7ff bf8d 	b.w	8000694 <_puts_r>
 800077a:	bf00      	nop
 800077c:	20000004 	.word	0x20000004

08000780 <__swbuf_r>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	460e      	mov	r6, r1
 8000784:	4614      	mov	r4, r2
 8000786:	4605      	mov	r5, r0
 8000788:	b118      	cbz	r0, 8000792 <__swbuf_r+0x12>
 800078a:	6983      	ldr	r3, [r0, #24]
 800078c:	b90b      	cbnz	r3, 8000792 <__swbuf_r+0x12>
 800078e:	f000 f9d1 	bl	8000b34 <__sinit>
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <__swbuf_r+0x98>)
 8000794:	429c      	cmp	r4, r3
 8000796:	d12b      	bne.n	80007f0 <__swbuf_r+0x70>
 8000798:	686c      	ldr	r4, [r5, #4]
 800079a:	69a3      	ldr	r3, [r4, #24]
 800079c:	60a3      	str	r3, [r4, #8]
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	071a      	lsls	r2, r3, #28
 80007a2:	d52f      	bpl.n	8000804 <__swbuf_r+0x84>
 80007a4:	6923      	ldr	r3, [r4, #16]
 80007a6:	b36b      	cbz	r3, 8000804 <__swbuf_r+0x84>
 80007a8:	6923      	ldr	r3, [r4, #16]
 80007aa:	6820      	ldr	r0, [r4, #0]
 80007ac:	1ac0      	subs	r0, r0, r3
 80007ae:	6963      	ldr	r3, [r4, #20]
 80007b0:	b2f6      	uxtb	r6, r6
 80007b2:	4283      	cmp	r3, r0
 80007b4:	4637      	mov	r7, r6
 80007b6:	dc04      	bgt.n	80007c2 <__swbuf_r+0x42>
 80007b8:	4621      	mov	r1, r4
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 f926 	bl	8000a0c <_fflush_r>
 80007c0:	bb30      	cbnz	r0, 8000810 <__swbuf_r+0x90>
 80007c2:	68a3      	ldr	r3, [r4, #8]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	60a3      	str	r3, [r4, #8]
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	6022      	str	r2, [r4, #0]
 80007ce:	701e      	strb	r6, [r3, #0]
 80007d0:	6963      	ldr	r3, [r4, #20]
 80007d2:	3001      	adds	r0, #1
 80007d4:	4283      	cmp	r3, r0
 80007d6:	d004      	beq.n	80007e2 <__swbuf_r+0x62>
 80007d8:	89a3      	ldrh	r3, [r4, #12]
 80007da:	07db      	lsls	r3, r3, #31
 80007dc:	d506      	bpl.n	80007ec <__swbuf_r+0x6c>
 80007de:	2e0a      	cmp	r6, #10
 80007e0:	d104      	bne.n	80007ec <__swbuf_r+0x6c>
 80007e2:	4621      	mov	r1, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 f911 	bl	8000a0c <_fflush_r>
 80007ea:	b988      	cbnz	r0, 8000810 <__swbuf_r+0x90>
 80007ec:	4638      	mov	r0, r7
 80007ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <__swbuf_r+0x9c>)
 80007f2:	429c      	cmp	r4, r3
 80007f4:	d101      	bne.n	80007fa <__swbuf_r+0x7a>
 80007f6:	68ac      	ldr	r4, [r5, #8]
 80007f8:	e7cf      	b.n	800079a <__swbuf_r+0x1a>
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <__swbuf_r+0xa0>)
 80007fc:	429c      	cmp	r4, r3
 80007fe:	bf08      	it	eq
 8000800:	68ec      	ldreq	r4, [r5, #12]
 8000802:	e7ca      	b.n	800079a <__swbuf_r+0x1a>
 8000804:	4621      	mov	r1, r4
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f80c 	bl	8000824 <__swsetup_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	d0cb      	beq.n	80007a8 <__swbuf_r+0x28>
 8000810:	f04f 37ff 	mov.w	r7, #4294967295
 8000814:	e7ea      	b.n	80007ec <__swbuf_r+0x6c>
 8000816:	bf00      	nop
 8000818:	080010e4 	.word	0x080010e4
 800081c:	08001104 	.word	0x08001104
 8000820:	080010c4 	.word	0x080010c4

08000824 <__swsetup_r>:
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <__swsetup_r+0xcc>)
 8000826:	b570      	push	{r4, r5, r6, lr}
 8000828:	681d      	ldr	r5, [r3, #0]
 800082a:	4606      	mov	r6, r0
 800082c:	460c      	mov	r4, r1
 800082e:	b125      	cbz	r5, 800083a <__swsetup_r+0x16>
 8000830:	69ab      	ldr	r3, [r5, #24]
 8000832:	b913      	cbnz	r3, 800083a <__swsetup_r+0x16>
 8000834:	4628      	mov	r0, r5
 8000836:	f000 f97d 	bl	8000b34 <__sinit>
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <__swsetup_r+0xd0>)
 800083c:	429c      	cmp	r4, r3
 800083e:	d10f      	bne.n	8000860 <__swsetup_r+0x3c>
 8000840:	686c      	ldr	r4, [r5, #4]
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000848:	0719      	lsls	r1, r3, #28
 800084a:	d42c      	bmi.n	80008a6 <__swsetup_r+0x82>
 800084c:	06dd      	lsls	r5, r3, #27
 800084e:	d411      	bmi.n	8000874 <__swsetup_r+0x50>
 8000850:	2309      	movs	r3, #9
 8000852:	6033      	str	r3, [r6, #0]
 8000854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000858:	81a3      	strh	r3, [r4, #12]
 800085a:	f04f 30ff 	mov.w	r0, #4294967295
 800085e:	e03e      	b.n	80008de <__swsetup_r+0xba>
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <__swsetup_r+0xd4>)
 8000862:	429c      	cmp	r4, r3
 8000864:	d101      	bne.n	800086a <__swsetup_r+0x46>
 8000866:	68ac      	ldr	r4, [r5, #8]
 8000868:	e7eb      	b.n	8000842 <__swsetup_r+0x1e>
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <__swsetup_r+0xd8>)
 800086c:	429c      	cmp	r4, r3
 800086e:	bf08      	it	eq
 8000870:	68ec      	ldreq	r4, [r5, #12]
 8000872:	e7e6      	b.n	8000842 <__swsetup_r+0x1e>
 8000874:	0758      	lsls	r0, r3, #29
 8000876:	d512      	bpl.n	800089e <__swsetup_r+0x7a>
 8000878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800087a:	b141      	cbz	r1, 800088e <__swsetup_r+0x6a>
 800087c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000880:	4299      	cmp	r1, r3
 8000882:	d002      	beq.n	800088a <__swsetup_r+0x66>
 8000884:	4630      	mov	r0, r6
 8000886:	f000 fa5b 	bl	8000d40 <_free_r>
 800088a:	2300      	movs	r3, #0
 800088c:	6363      	str	r3, [r4, #52]	; 0x34
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	2300      	movs	r3, #0
 8000898:	6063      	str	r3, [r4, #4]
 800089a:	6923      	ldr	r3, [r4, #16]
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	6923      	ldr	r3, [r4, #16]
 80008a8:	b94b      	cbnz	r3, 80008be <__swsetup_r+0x9a>
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008b4:	d003      	beq.n	80008be <__swsetup_r+0x9a>
 80008b6:	4621      	mov	r1, r4
 80008b8:	4630      	mov	r0, r6
 80008ba:	f000 fa01 	bl	8000cc0 <__smakebuf_r>
 80008be:	89a0      	ldrh	r0, [r4, #12]
 80008c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008c4:	f010 0301 	ands.w	r3, r0, #1
 80008c8:	d00a      	beq.n	80008e0 <__swsetup_r+0xbc>
 80008ca:	2300      	movs	r3, #0
 80008cc:	60a3      	str	r3, [r4, #8]
 80008ce:	6963      	ldr	r3, [r4, #20]
 80008d0:	425b      	negs	r3, r3
 80008d2:	61a3      	str	r3, [r4, #24]
 80008d4:	6923      	ldr	r3, [r4, #16]
 80008d6:	b943      	cbnz	r3, 80008ea <__swsetup_r+0xc6>
 80008d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008dc:	d1ba      	bne.n	8000854 <__swsetup_r+0x30>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	0781      	lsls	r1, r0, #30
 80008e2:	bf58      	it	pl
 80008e4:	6963      	ldrpl	r3, [r4, #20]
 80008e6:	60a3      	str	r3, [r4, #8]
 80008e8:	e7f4      	b.n	80008d4 <__swsetup_r+0xb0>
 80008ea:	2000      	movs	r0, #0
 80008ec:	e7f7      	b.n	80008de <__swsetup_r+0xba>
 80008ee:	bf00      	nop
 80008f0:	20000004 	.word	0x20000004
 80008f4:	080010e4 	.word	0x080010e4
 80008f8:	08001104 	.word	0x08001104
 80008fc:	080010c4 	.word	0x080010c4

08000900 <__sflush_r>:
 8000900:	898a      	ldrh	r2, [r1, #12]
 8000902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000906:	4605      	mov	r5, r0
 8000908:	0710      	lsls	r0, r2, #28
 800090a:	460c      	mov	r4, r1
 800090c:	d458      	bmi.n	80009c0 <__sflush_r+0xc0>
 800090e:	684b      	ldr	r3, [r1, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dc05      	bgt.n	8000920 <__sflush_r+0x20>
 8000914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000916:	2b00      	cmp	r3, #0
 8000918:	dc02      	bgt.n	8000920 <__sflush_r+0x20>
 800091a:	2000      	movs	r0, #0
 800091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000922:	2e00      	cmp	r6, #0
 8000924:	d0f9      	beq.n	800091a <__sflush_r+0x1a>
 8000926:	2300      	movs	r3, #0
 8000928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800092c:	682f      	ldr	r7, [r5, #0]
 800092e:	602b      	str	r3, [r5, #0]
 8000930:	d032      	beq.n	8000998 <__sflush_r+0x98>
 8000932:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000934:	89a3      	ldrh	r3, [r4, #12]
 8000936:	075a      	lsls	r2, r3, #29
 8000938:	d505      	bpl.n	8000946 <__sflush_r+0x46>
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	1ac0      	subs	r0, r0, r3
 800093e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000940:	b10b      	cbz	r3, 8000946 <__sflush_r+0x46>
 8000942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000944:	1ac0      	subs	r0, r0, r3
 8000946:	2300      	movs	r3, #0
 8000948:	4602      	mov	r2, r0
 800094a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800094c:	6a21      	ldr	r1, [r4, #32]
 800094e:	4628      	mov	r0, r5
 8000950:	47b0      	blx	r6
 8000952:	1c43      	adds	r3, r0, #1
 8000954:	89a3      	ldrh	r3, [r4, #12]
 8000956:	d106      	bne.n	8000966 <__sflush_r+0x66>
 8000958:	6829      	ldr	r1, [r5, #0]
 800095a:	291d      	cmp	r1, #29
 800095c:	d82c      	bhi.n	80009b8 <__sflush_r+0xb8>
 800095e:	4a2a      	ldr	r2, [pc, #168]	; (8000a08 <__sflush_r+0x108>)
 8000960:	40ca      	lsrs	r2, r1
 8000962:	07d6      	lsls	r6, r2, #31
 8000964:	d528      	bpl.n	80009b8 <__sflush_r+0xb8>
 8000966:	2200      	movs	r2, #0
 8000968:	6062      	str	r2, [r4, #4]
 800096a:	04d9      	lsls	r1, r3, #19
 800096c:	6922      	ldr	r2, [r4, #16]
 800096e:	6022      	str	r2, [r4, #0]
 8000970:	d504      	bpl.n	800097c <__sflush_r+0x7c>
 8000972:	1c42      	adds	r2, r0, #1
 8000974:	d101      	bne.n	800097a <__sflush_r+0x7a>
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	b903      	cbnz	r3, 800097c <__sflush_r+0x7c>
 800097a:	6560      	str	r0, [r4, #84]	; 0x54
 800097c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800097e:	602f      	str	r7, [r5, #0]
 8000980:	2900      	cmp	r1, #0
 8000982:	d0ca      	beq.n	800091a <__sflush_r+0x1a>
 8000984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000988:	4299      	cmp	r1, r3
 800098a:	d002      	beq.n	8000992 <__sflush_r+0x92>
 800098c:	4628      	mov	r0, r5
 800098e:	f000 f9d7 	bl	8000d40 <_free_r>
 8000992:	2000      	movs	r0, #0
 8000994:	6360      	str	r0, [r4, #52]	; 0x34
 8000996:	e7c1      	b.n	800091c <__sflush_r+0x1c>
 8000998:	6a21      	ldr	r1, [r4, #32]
 800099a:	2301      	movs	r3, #1
 800099c:	4628      	mov	r0, r5
 800099e:	47b0      	blx	r6
 80009a0:	1c41      	adds	r1, r0, #1
 80009a2:	d1c7      	bne.n	8000934 <__sflush_r+0x34>
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0c4      	beq.n	8000934 <__sflush_r+0x34>
 80009aa:	2b1d      	cmp	r3, #29
 80009ac:	d001      	beq.n	80009b2 <__sflush_r+0xb2>
 80009ae:	2b16      	cmp	r3, #22
 80009b0:	d101      	bne.n	80009b6 <__sflush_r+0xb6>
 80009b2:	602f      	str	r7, [r5, #0]
 80009b4:	e7b1      	b.n	800091a <__sflush_r+0x1a>
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009bc:	81a3      	strh	r3, [r4, #12]
 80009be:	e7ad      	b.n	800091c <__sflush_r+0x1c>
 80009c0:	690f      	ldr	r7, [r1, #16]
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d0a9      	beq.n	800091a <__sflush_r+0x1a>
 80009c6:	0793      	lsls	r3, r2, #30
 80009c8:	680e      	ldr	r6, [r1, #0]
 80009ca:	bf08      	it	eq
 80009cc:	694b      	ldreq	r3, [r1, #20]
 80009ce:	600f      	str	r7, [r1, #0]
 80009d0:	bf18      	it	ne
 80009d2:	2300      	movne	r3, #0
 80009d4:	eba6 0807 	sub.w	r8, r6, r7
 80009d8:	608b      	str	r3, [r1, #8]
 80009da:	f1b8 0f00 	cmp.w	r8, #0
 80009de:	dd9c      	ble.n	800091a <__sflush_r+0x1a>
 80009e0:	6a21      	ldr	r1, [r4, #32]
 80009e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009e4:	4643      	mov	r3, r8
 80009e6:	463a      	mov	r2, r7
 80009e8:	4628      	mov	r0, r5
 80009ea:	47b0      	blx	r6
 80009ec:	2800      	cmp	r0, #0
 80009ee:	dc06      	bgt.n	80009fe <__sflush_r+0xfe>
 80009f0:	89a3      	ldrh	r3, [r4, #12]
 80009f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f6:	81a3      	strh	r3, [r4, #12]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	e78e      	b.n	800091c <__sflush_r+0x1c>
 80009fe:	4407      	add	r7, r0
 8000a00:	eba8 0800 	sub.w	r8, r8, r0
 8000a04:	e7e9      	b.n	80009da <__sflush_r+0xda>
 8000a06:	bf00      	nop
 8000a08:	20400001 	.word	0x20400001

08000a0c <_fflush_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	690b      	ldr	r3, [r1, #16]
 8000a10:	4605      	mov	r5, r0
 8000a12:	460c      	mov	r4, r1
 8000a14:	b913      	cbnz	r3, 8000a1c <_fflush_r+0x10>
 8000a16:	2500      	movs	r5, #0
 8000a18:	4628      	mov	r0, r5
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
 8000a1c:	b118      	cbz	r0, 8000a26 <_fflush_r+0x1a>
 8000a1e:	6983      	ldr	r3, [r0, #24]
 8000a20:	b90b      	cbnz	r3, 8000a26 <_fflush_r+0x1a>
 8000a22:	f000 f887 	bl	8000b34 <__sinit>
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <_fflush_r+0x6c>)
 8000a28:	429c      	cmp	r4, r3
 8000a2a:	d11b      	bne.n	8000a64 <_fflush_r+0x58>
 8000a2c:	686c      	ldr	r4, [r5, #4]
 8000a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0ef      	beq.n	8000a16 <_fflush_r+0xa>
 8000a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a38:	07d0      	lsls	r0, r2, #31
 8000a3a:	d404      	bmi.n	8000a46 <_fflush_r+0x3a>
 8000a3c:	0599      	lsls	r1, r3, #22
 8000a3e:	d402      	bmi.n	8000a46 <_fflush_r+0x3a>
 8000a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a42:	f000 f915 	bl	8000c70 <__retarget_lock_acquire_recursive>
 8000a46:	4628      	mov	r0, r5
 8000a48:	4621      	mov	r1, r4
 8000a4a:	f7ff ff59 	bl	8000900 <__sflush_r>
 8000a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a50:	07da      	lsls	r2, r3, #31
 8000a52:	4605      	mov	r5, r0
 8000a54:	d4e0      	bmi.n	8000a18 <_fflush_r+0xc>
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	059b      	lsls	r3, r3, #22
 8000a5a:	d4dd      	bmi.n	8000a18 <_fflush_r+0xc>
 8000a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a5e:	f000 f908 	bl	8000c72 <__retarget_lock_release_recursive>
 8000a62:	e7d9      	b.n	8000a18 <_fflush_r+0xc>
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <_fflush_r+0x70>)
 8000a66:	429c      	cmp	r4, r3
 8000a68:	d101      	bne.n	8000a6e <_fflush_r+0x62>
 8000a6a:	68ac      	ldr	r4, [r5, #8]
 8000a6c:	e7df      	b.n	8000a2e <_fflush_r+0x22>
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <_fflush_r+0x74>)
 8000a70:	429c      	cmp	r4, r3
 8000a72:	bf08      	it	eq
 8000a74:	68ec      	ldreq	r4, [r5, #12]
 8000a76:	e7da      	b.n	8000a2e <_fflush_r+0x22>
 8000a78:	080010e4 	.word	0x080010e4
 8000a7c:	08001104 	.word	0x08001104
 8000a80:	080010c4 	.word	0x080010c4

08000a84 <std>:
 8000a84:	2300      	movs	r3, #0
 8000a86:	b510      	push	{r4, lr}
 8000a88:	4604      	mov	r4, r0
 8000a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a92:	6083      	str	r3, [r0, #8]
 8000a94:	8181      	strh	r1, [r0, #12]
 8000a96:	6643      	str	r3, [r0, #100]	; 0x64
 8000a98:	81c2      	strh	r2, [r0, #14]
 8000a9a:	6183      	str	r3, [r0, #24]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	305c      	adds	r0, #92	; 0x5c
 8000aa2:	f7ff fdef 	bl	8000684 <memset>
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <std+0x38>)
 8000aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <std+0x3c>)
 8000aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <std+0x40>)
 8000ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <std+0x44>)
 8000ab4:	6224      	str	r4, [r4, #32]
 8000ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	08000f21 	.word	0x08000f21
 8000ac0:	08000f43 	.word	0x08000f43
 8000ac4:	08000f7b 	.word	0x08000f7b
 8000ac8:	08000f9f 	.word	0x08000f9f

08000acc <_cleanup_r>:
 8000acc:	4901      	ldr	r1, [pc, #4]	; (8000ad4 <_cleanup_r+0x8>)
 8000ace:	f000 b8af 	b.w	8000c30 <_fwalk_reent>
 8000ad2:	bf00      	nop
 8000ad4:	08000a0d 	.word	0x08000a0d

08000ad8 <__sfmoreglue>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	2268      	movs	r2, #104	; 0x68
 8000adc:	1e4d      	subs	r5, r1, #1
 8000ade:	4355      	muls	r5, r2
 8000ae0:	460e      	mov	r6, r1
 8000ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ae6:	f000 f997 	bl	8000e18 <_malloc_r>
 8000aea:	4604      	mov	r4, r0
 8000aec:	b140      	cbz	r0, 8000b00 <__sfmoreglue+0x28>
 8000aee:	2100      	movs	r1, #0
 8000af0:	e9c0 1600 	strd	r1, r6, [r0]
 8000af4:	300c      	adds	r0, #12
 8000af6:	60a0      	str	r0, [r4, #8]
 8000af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000afc:	f7ff fdc2 	bl	8000684 <memset>
 8000b00:	4620      	mov	r0, r4
 8000b02:	bd70      	pop	{r4, r5, r6, pc}

08000b04 <__sfp_lock_acquire>:
 8000b04:	4801      	ldr	r0, [pc, #4]	; (8000b0c <__sfp_lock_acquire+0x8>)
 8000b06:	f000 b8b3 	b.w	8000c70 <__retarget_lock_acquire_recursive>
 8000b0a:	bf00      	nop
 8000b0c:	20000091 	.word	0x20000091

08000b10 <__sfp_lock_release>:
 8000b10:	4801      	ldr	r0, [pc, #4]	; (8000b18 <__sfp_lock_release+0x8>)
 8000b12:	f000 b8ae 	b.w	8000c72 <__retarget_lock_release_recursive>
 8000b16:	bf00      	nop
 8000b18:	20000091 	.word	0x20000091

08000b1c <__sinit_lock_acquire>:
 8000b1c:	4801      	ldr	r0, [pc, #4]	; (8000b24 <__sinit_lock_acquire+0x8>)
 8000b1e:	f000 b8a7 	b.w	8000c70 <__retarget_lock_acquire_recursive>
 8000b22:	bf00      	nop
 8000b24:	20000092 	.word	0x20000092

08000b28 <__sinit_lock_release>:
 8000b28:	4801      	ldr	r0, [pc, #4]	; (8000b30 <__sinit_lock_release+0x8>)
 8000b2a:	f000 b8a2 	b.w	8000c72 <__retarget_lock_release_recursive>
 8000b2e:	bf00      	nop
 8000b30:	20000092 	.word	0x20000092

08000b34 <__sinit>:
 8000b34:	b510      	push	{r4, lr}
 8000b36:	4604      	mov	r4, r0
 8000b38:	f7ff fff0 	bl	8000b1c <__sinit_lock_acquire>
 8000b3c:	69a3      	ldr	r3, [r4, #24]
 8000b3e:	b11b      	cbz	r3, 8000b48 <__sinit+0x14>
 8000b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b44:	f7ff bff0 	b.w	8000b28 <__sinit_lock_release>
 8000b48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b4c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <__sinit+0x68>)
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <__sinit+0x6c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	bf04      	itt	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	61a3      	streq	r3, [r4, #24]
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f000 f820 	bl	8000ba4 <__sfp>
 8000b64:	6060      	str	r0, [r4, #4]
 8000b66:	4620      	mov	r0, r4
 8000b68:	f000 f81c 	bl	8000ba4 <__sfp>
 8000b6c:	60a0      	str	r0, [r4, #8]
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f000 f818 	bl	8000ba4 <__sfp>
 8000b74:	2200      	movs	r2, #0
 8000b76:	60e0      	str	r0, [r4, #12]
 8000b78:	2104      	movs	r1, #4
 8000b7a:	6860      	ldr	r0, [r4, #4]
 8000b7c:	f7ff ff82 	bl	8000a84 <std>
 8000b80:	68a0      	ldr	r0, [r4, #8]
 8000b82:	2201      	movs	r2, #1
 8000b84:	2109      	movs	r1, #9
 8000b86:	f7ff ff7d 	bl	8000a84 <std>
 8000b8a:	68e0      	ldr	r0, [r4, #12]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	2112      	movs	r1, #18
 8000b90:	f7ff ff78 	bl	8000a84 <std>
 8000b94:	2301      	movs	r3, #1
 8000b96:	61a3      	str	r3, [r4, #24]
 8000b98:	e7d2      	b.n	8000b40 <__sinit+0xc>
 8000b9a:	bf00      	nop
 8000b9c:	080010c0 	.word	0x080010c0
 8000ba0:	08000acd 	.word	0x08000acd

08000ba4 <__sfp>:
 8000ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba6:	4607      	mov	r7, r0
 8000ba8:	f7ff ffac 	bl	8000b04 <__sfp_lock_acquire>
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <__sfp+0x84>)
 8000bae:	681e      	ldr	r6, [r3, #0]
 8000bb0:	69b3      	ldr	r3, [r6, #24]
 8000bb2:	b913      	cbnz	r3, 8000bba <__sfp+0x16>
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f7ff ffbd 	bl	8000b34 <__sinit>
 8000bba:	3648      	adds	r6, #72	; 0x48
 8000bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	d503      	bpl.n	8000bcc <__sfp+0x28>
 8000bc4:	6833      	ldr	r3, [r6, #0]
 8000bc6:	b30b      	cbz	r3, 8000c0c <__sfp+0x68>
 8000bc8:	6836      	ldr	r6, [r6, #0]
 8000bca:	e7f7      	b.n	8000bbc <__sfp+0x18>
 8000bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bd0:	b9d5      	cbnz	r5, 8000c08 <__sfp+0x64>
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <__sfp+0x88>)
 8000bd4:	60e3      	str	r3, [r4, #12]
 8000bd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bda:	6665      	str	r5, [r4, #100]	; 0x64
 8000bdc:	f000 f847 	bl	8000c6e <__retarget_lock_init_recursive>
 8000be0:	f7ff ff96 	bl	8000b10 <__sfp_lock_release>
 8000be4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000be8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000bec:	6025      	str	r5, [r4, #0]
 8000bee:	61a5      	str	r5, [r4, #24]
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bf8:	f7ff fd44 	bl	8000684 <memset>
 8000bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c04:	4620      	mov	r0, r4
 8000c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c08:	3468      	adds	r4, #104	; 0x68
 8000c0a:	e7d9      	b.n	8000bc0 <__sfp+0x1c>
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f7ff ff62 	bl	8000ad8 <__sfmoreglue>
 8000c14:	4604      	mov	r4, r0
 8000c16:	6030      	str	r0, [r6, #0]
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1d5      	bne.n	8000bc8 <__sfp+0x24>
 8000c1c:	f7ff ff78 	bl	8000b10 <__sfp_lock_release>
 8000c20:	230c      	movs	r3, #12
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	e7ee      	b.n	8000c04 <__sfp+0x60>
 8000c26:	bf00      	nop
 8000c28:	080010c0 	.word	0x080010c0
 8000c2c:	ffff0001 	.word	0xffff0001

08000c30 <_fwalk_reent>:
 8000c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c34:	4606      	mov	r6, r0
 8000c36:	4688      	mov	r8, r1
 8000c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c42:	f1b9 0901 	subs.w	r9, r9, #1
 8000c46:	d505      	bpl.n	8000c54 <_fwalk_reent+0x24>
 8000c48:	6824      	ldr	r4, [r4, #0]
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d1f7      	bne.n	8000c3e <_fwalk_reent+0xe>
 8000c4e:	4638      	mov	r0, r7
 8000c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c54:	89ab      	ldrh	r3, [r5, #12]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d907      	bls.n	8000c6a <_fwalk_reent+0x3a>
 8000c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	d003      	beq.n	8000c6a <_fwalk_reent+0x3a>
 8000c62:	4629      	mov	r1, r5
 8000c64:	4630      	mov	r0, r6
 8000c66:	47c0      	blx	r8
 8000c68:	4307      	orrs	r7, r0
 8000c6a:	3568      	adds	r5, #104	; 0x68
 8000c6c:	e7e9      	b.n	8000c42 <_fwalk_reent+0x12>

08000c6e <__retarget_lock_init_recursive>:
 8000c6e:	4770      	bx	lr

08000c70 <__retarget_lock_acquire_recursive>:
 8000c70:	4770      	bx	lr

08000c72 <__retarget_lock_release_recursive>:
 8000c72:	4770      	bx	lr

08000c74 <__swhatbuf_r>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	460e      	mov	r6, r1
 8000c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	b096      	sub	sp, #88	; 0x58
 8000c80:	4614      	mov	r4, r2
 8000c82:	461d      	mov	r5, r3
 8000c84:	da08      	bge.n	8000c98 <__swhatbuf_r+0x24>
 8000c86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	602a      	str	r2, [r5, #0]
 8000c8e:	061a      	lsls	r2, r3, #24
 8000c90:	d410      	bmi.n	8000cb4 <__swhatbuf_r+0x40>
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c96:	e00e      	b.n	8000cb6 <__swhatbuf_r+0x42>
 8000c98:	466a      	mov	r2, sp
 8000c9a:	f000 f9a7 	bl	8000fec <_fstat_r>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	dbf1      	blt.n	8000c86 <__swhatbuf_r+0x12>
 8000ca2:	9a01      	ldr	r2, [sp, #4]
 8000ca4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ca8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cac:	425a      	negs	r2, r3
 8000cae:	415a      	adcs	r2, r3
 8000cb0:	602a      	str	r2, [r5, #0]
 8000cb2:	e7ee      	b.n	8000c92 <__swhatbuf_r+0x1e>
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	6023      	str	r3, [r4, #0]
 8000cba:	b016      	add	sp, #88	; 0x58
 8000cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cc0 <__smakebuf_r>:
 8000cc0:	898b      	ldrh	r3, [r1, #12]
 8000cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cc4:	079d      	lsls	r5, r3, #30
 8000cc6:	4606      	mov	r6, r0
 8000cc8:	460c      	mov	r4, r1
 8000cca:	d507      	bpl.n	8000cdc <__smakebuf_r+0x1c>
 8000ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cd0:	6023      	str	r3, [r4, #0]
 8000cd2:	6123      	str	r3, [r4, #16]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	6163      	str	r3, [r4, #20]
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	ab01      	add	r3, sp, #4
 8000cde:	466a      	mov	r2, sp
 8000ce0:	f7ff ffc8 	bl	8000c74 <__swhatbuf_r>
 8000ce4:	9900      	ldr	r1, [sp, #0]
 8000ce6:	4605      	mov	r5, r0
 8000ce8:	4630      	mov	r0, r6
 8000cea:	f000 f895 	bl	8000e18 <_malloc_r>
 8000cee:	b948      	cbnz	r0, 8000d04 <__smakebuf_r+0x44>
 8000cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf4:	059a      	lsls	r2, r3, #22
 8000cf6:	d4ef      	bmi.n	8000cd8 <__smakebuf_r+0x18>
 8000cf8:	f023 0303 	bic.w	r3, r3, #3
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	81a3      	strh	r3, [r4, #12]
 8000d02:	e7e3      	b.n	8000ccc <__smakebuf_r+0xc>
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <__smakebuf_r+0x7c>)
 8000d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d08:	89a3      	ldrh	r3, [r4, #12]
 8000d0a:	6020      	str	r0, [r4, #0]
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	81a3      	strh	r3, [r4, #12]
 8000d12:	9b00      	ldr	r3, [sp, #0]
 8000d14:	6163      	str	r3, [r4, #20]
 8000d16:	9b01      	ldr	r3, [sp, #4]
 8000d18:	6120      	str	r0, [r4, #16]
 8000d1a:	b15b      	cbz	r3, 8000d34 <__smakebuf_r+0x74>
 8000d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d20:	4630      	mov	r0, r6
 8000d22:	f000 f975 	bl	8001010 <_isatty_r>
 8000d26:	b128      	cbz	r0, 8000d34 <__smakebuf_r+0x74>
 8000d28:	89a3      	ldrh	r3, [r4, #12]
 8000d2a:	f023 0303 	bic.w	r3, r3, #3
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	81a3      	strh	r3, [r4, #12]
 8000d34:	89a0      	ldrh	r0, [r4, #12]
 8000d36:	4305      	orrs	r5, r0
 8000d38:	81a5      	strh	r5, [r4, #12]
 8000d3a:	e7cd      	b.n	8000cd8 <__smakebuf_r+0x18>
 8000d3c:	08000acd 	.word	0x08000acd

08000d40 <_free_r>:
 8000d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d044      	beq.n	8000dd0 <_free_r+0x90>
 8000d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d4a:	9001      	str	r0, [sp, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8000d52:	bfb8      	it	lt
 8000d54:	18e4      	addlt	r4, r4, r3
 8000d56:	f000 f97d 	bl	8001054 <__malloc_lock>
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <_free_r+0x94>)
 8000d5c:	9801      	ldr	r0, [sp, #4]
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	b933      	cbnz	r3, 8000d70 <_free_r+0x30>
 8000d62:	6063      	str	r3, [r4, #4]
 8000d64:	6014      	str	r4, [r2, #0]
 8000d66:	b003      	add	sp, #12
 8000d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d6c:	f000 b978 	b.w	8001060 <__malloc_unlock>
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d908      	bls.n	8000d86 <_free_r+0x46>
 8000d74:	6825      	ldr	r5, [r4, #0]
 8000d76:	1961      	adds	r1, r4, r5
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	bf01      	itttt	eq
 8000d7c:	6819      	ldreq	r1, [r3, #0]
 8000d7e:	685b      	ldreq	r3, [r3, #4]
 8000d80:	1949      	addeq	r1, r1, r5
 8000d82:	6021      	streq	r1, [r4, #0]
 8000d84:	e7ed      	b.n	8000d62 <_free_r+0x22>
 8000d86:	461a      	mov	r2, r3
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	b10b      	cbz	r3, 8000d90 <_free_r+0x50>
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d9fa      	bls.n	8000d86 <_free_r+0x46>
 8000d90:	6811      	ldr	r1, [r2, #0]
 8000d92:	1855      	adds	r5, r2, r1
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	d10b      	bne.n	8000db0 <_free_r+0x70>
 8000d98:	6824      	ldr	r4, [r4, #0]
 8000d9a:	4421      	add	r1, r4
 8000d9c:	1854      	adds	r4, r2, r1
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	6011      	str	r1, [r2, #0]
 8000da2:	d1e0      	bne.n	8000d66 <_free_r+0x26>
 8000da4:	681c      	ldr	r4, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	6053      	str	r3, [r2, #4]
 8000daa:	4421      	add	r1, r4
 8000dac:	6011      	str	r1, [r2, #0]
 8000dae:	e7da      	b.n	8000d66 <_free_r+0x26>
 8000db0:	d902      	bls.n	8000db8 <_free_r+0x78>
 8000db2:	230c      	movs	r3, #12
 8000db4:	6003      	str	r3, [r0, #0]
 8000db6:	e7d6      	b.n	8000d66 <_free_r+0x26>
 8000db8:	6825      	ldr	r5, [r4, #0]
 8000dba:	1961      	adds	r1, r4, r5
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	bf04      	itt	eq
 8000dc0:	6819      	ldreq	r1, [r3, #0]
 8000dc2:	685b      	ldreq	r3, [r3, #4]
 8000dc4:	6063      	str	r3, [r4, #4]
 8000dc6:	bf04      	itt	eq
 8000dc8:	1949      	addeq	r1, r1, r5
 8000dca:	6021      	streq	r1, [r4, #0]
 8000dcc:	6054      	str	r4, [r2, #4]
 8000dce:	e7ca      	b.n	8000d66 <_free_r+0x26>
 8000dd0:	b003      	add	sp, #12
 8000dd2:	bd30      	pop	{r4, r5, pc}
 8000dd4:	20000094 	.word	0x20000094

08000dd8 <sbrk_aligned>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	4e0e      	ldr	r6, [pc, #56]	; (8000e14 <sbrk_aligned+0x3c>)
 8000ddc:	460c      	mov	r4, r1
 8000dde:	6831      	ldr	r1, [r6, #0]
 8000de0:	4605      	mov	r5, r0
 8000de2:	b911      	cbnz	r1, 8000dea <sbrk_aligned+0x12>
 8000de4:	f000 f88c 	bl	8000f00 <_sbrk_r>
 8000de8:	6030      	str	r0, [r6, #0]
 8000dea:	4621      	mov	r1, r4
 8000dec:	4628      	mov	r0, r5
 8000dee:	f000 f887 	bl	8000f00 <_sbrk_r>
 8000df2:	1c43      	adds	r3, r0, #1
 8000df4:	d00a      	beq.n	8000e0c <sbrk_aligned+0x34>
 8000df6:	1cc4      	adds	r4, r0, #3
 8000df8:	f024 0403 	bic.w	r4, r4, #3
 8000dfc:	42a0      	cmp	r0, r4
 8000dfe:	d007      	beq.n	8000e10 <sbrk_aligned+0x38>
 8000e00:	1a21      	subs	r1, r4, r0
 8000e02:	4628      	mov	r0, r5
 8000e04:	f000 f87c 	bl	8000f00 <_sbrk_r>
 8000e08:	3001      	adds	r0, #1
 8000e0a:	d101      	bne.n	8000e10 <sbrk_aligned+0x38>
 8000e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8000e10:	4620      	mov	r0, r4
 8000e12:	bd70      	pop	{r4, r5, r6, pc}
 8000e14:	20000098 	.word	0x20000098

08000e18 <_malloc_r>:
 8000e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e1c:	1ccd      	adds	r5, r1, #3
 8000e1e:	f025 0503 	bic.w	r5, r5, #3
 8000e22:	3508      	adds	r5, #8
 8000e24:	2d0c      	cmp	r5, #12
 8000e26:	bf38      	it	cc
 8000e28:	250c      	movcc	r5, #12
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	4607      	mov	r7, r0
 8000e2e:	db01      	blt.n	8000e34 <_malloc_r+0x1c>
 8000e30:	42a9      	cmp	r1, r5
 8000e32:	d905      	bls.n	8000e40 <_malloc_r+0x28>
 8000e34:	230c      	movs	r3, #12
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	2600      	movs	r6, #0
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e40:	4e2e      	ldr	r6, [pc, #184]	; (8000efc <_malloc_r+0xe4>)
 8000e42:	f000 f907 	bl	8001054 <__malloc_lock>
 8000e46:	6833      	ldr	r3, [r6, #0]
 8000e48:	461c      	mov	r4, r3
 8000e4a:	bb34      	cbnz	r4, 8000e9a <_malloc_r+0x82>
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	4638      	mov	r0, r7
 8000e50:	f7ff ffc2 	bl	8000dd8 <sbrk_aligned>
 8000e54:	1c43      	adds	r3, r0, #1
 8000e56:	4604      	mov	r4, r0
 8000e58:	d14d      	bne.n	8000ef6 <_malloc_r+0xde>
 8000e5a:	6834      	ldr	r4, [r6, #0]
 8000e5c:	4626      	mov	r6, r4
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d140      	bne.n	8000ee4 <_malloc_r+0xcc>
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	4631      	mov	r1, r6
 8000e66:	4638      	mov	r0, r7
 8000e68:	eb04 0803 	add.w	r8, r4, r3
 8000e6c:	f000 f848 	bl	8000f00 <_sbrk_r>
 8000e70:	4580      	cmp	r8, r0
 8000e72:	d13a      	bne.n	8000eea <_malloc_r+0xd2>
 8000e74:	6821      	ldr	r1, [r4, #0]
 8000e76:	3503      	adds	r5, #3
 8000e78:	1a6d      	subs	r5, r5, r1
 8000e7a:	f025 0503 	bic.w	r5, r5, #3
 8000e7e:	3508      	adds	r5, #8
 8000e80:	2d0c      	cmp	r5, #12
 8000e82:	bf38      	it	cc
 8000e84:	250c      	movcc	r5, #12
 8000e86:	4629      	mov	r1, r5
 8000e88:	4638      	mov	r0, r7
 8000e8a:	f7ff ffa5 	bl	8000dd8 <sbrk_aligned>
 8000e8e:	3001      	adds	r0, #1
 8000e90:	d02b      	beq.n	8000eea <_malloc_r+0xd2>
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	442b      	add	r3, r5
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	e00e      	b.n	8000eb8 <_malloc_r+0xa0>
 8000e9a:	6822      	ldr	r2, [r4, #0]
 8000e9c:	1b52      	subs	r2, r2, r5
 8000e9e:	d41e      	bmi.n	8000ede <_malloc_r+0xc6>
 8000ea0:	2a0b      	cmp	r2, #11
 8000ea2:	d916      	bls.n	8000ed2 <_malloc_r+0xba>
 8000ea4:	1961      	adds	r1, r4, r5
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	6025      	str	r5, [r4, #0]
 8000eaa:	bf18      	it	ne
 8000eac:	6059      	strne	r1, [r3, #4]
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	bf08      	it	eq
 8000eb2:	6031      	streq	r1, [r6, #0]
 8000eb4:	5162      	str	r2, [r4, r5]
 8000eb6:	604b      	str	r3, [r1, #4]
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f104 060b 	add.w	r6, r4, #11
 8000ebe:	f000 f8cf 	bl	8001060 <__malloc_unlock>
 8000ec2:	f026 0607 	bic.w	r6, r6, #7
 8000ec6:	1d23      	adds	r3, r4, #4
 8000ec8:	1af2      	subs	r2, r6, r3
 8000eca:	d0b6      	beq.n	8000e3a <_malloc_r+0x22>
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	50a3      	str	r3, [r4, r2]
 8000ed0:	e7b3      	b.n	8000e3a <_malloc_r+0x22>
 8000ed2:	6862      	ldr	r2, [r4, #4]
 8000ed4:	42a3      	cmp	r3, r4
 8000ed6:	bf0c      	ite	eq
 8000ed8:	6032      	streq	r2, [r6, #0]
 8000eda:	605a      	strne	r2, [r3, #4]
 8000edc:	e7ec      	b.n	8000eb8 <_malloc_r+0xa0>
 8000ede:	4623      	mov	r3, r4
 8000ee0:	6864      	ldr	r4, [r4, #4]
 8000ee2:	e7b2      	b.n	8000e4a <_malloc_r+0x32>
 8000ee4:	4634      	mov	r4, r6
 8000ee6:	6876      	ldr	r6, [r6, #4]
 8000ee8:	e7b9      	b.n	8000e5e <_malloc_r+0x46>
 8000eea:	230c      	movs	r3, #12
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f000 f8b6 	bl	8001060 <__malloc_unlock>
 8000ef4:	e7a1      	b.n	8000e3a <_malloc_r+0x22>
 8000ef6:	6025      	str	r5, [r4, #0]
 8000ef8:	e7de      	b.n	8000eb8 <_malloc_r+0xa0>
 8000efa:	bf00      	nop
 8000efc:	20000094 	.word	0x20000094

08000f00 <_sbrk_r>:
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4d06      	ldr	r5, [pc, #24]	; (8000f1c <_sbrk_r+0x1c>)
 8000f04:	2300      	movs	r3, #0
 8000f06:	4604      	mov	r4, r0
 8000f08:	4608      	mov	r0, r1
 8000f0a:	602b      	str	r3, [r5, #0]
 8000f0c:	f7ff fa28 	bl	8000360 <_sbrk>
 8000f10:	1c43      	adds	r3, r0, #1
 8000f12:	d102      	bne.n	8000f1a <_sbrk_r+0x1a>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	b103      	cbz	r3, 8000f1a <_sbrk_r+0x1a>
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	2000009c 	.word	0x2000009c

08000f20 <__sread>:
 8000f20:	b510      	push	{r4, lr}
 8000f22:	460c      	mov	r4, r1
 8000f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f28:	f000 f8a0 	bl	800106c <_read_r>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	bfab      	itete	ge
 8000f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f32:	89a3      	ldrhlt	r3, [r4, #12]
 8000f34:	181b      	addge	r3, r3, r0
 8000f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f3a:	bfac      	ite	ge
 8000f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f3e:	81a3      	strhlt	r3, [r4, #12]
 8000f40:	bd10      	pop	{r4, pc}

08000f42 <__swrite>:
 8000f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f46:	461f      	mov	r7, r3
 8000f48:	898b      	ldrh	r3, [r1, #12]
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	4616      	mov	r6, r2
 8000f52:	d505      	bpl.n	8000f60 <__swrite+0x1e>
 8000f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f000 f868 	bl	8001030 <_lseek_r>
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f6a:	81a3      	strh	r3, [r4, #12]
 8000f6c:	4632      	mov	r2, r6
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4628      	mov	r0, r5
 8000f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f76:	f000 b817 	b.w	8000fa8 <_write_r>

08000f7a <__sseek>:
 8000f7a:	b510      	push	{r4, lr}
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f82:	f000 f855 	bl	8001030 <_lseek_r>
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	89a3      	ldrh	r3, [r4, #12]
 8000f8a:	bf15      	itete	ne
 8000f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f96:	81a3      	strheq	r3, [r4, #12]
 8000f98:	bf18      	it	ne
 8000f9a:	81a3      	strhne	r3, [r4, #12]
 8000f9c:	bd10      	pop	{r4, pc}

08000f9e <__sclose>:
 8000f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa2:	f000 b813 	b.w	8000fcc <_close_r>
	...

08000fa8 <_write_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4d07      	ldr	r5, [pc, #28]	; (8000fc8 <_write_r+0x20>)
 8000fac:	4604      	mov	r4, r0
 8000fae:	4608      	mov	r0, r1
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	602a      	str	r2, [r5, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f7ff f981 	bl	80002be <_write>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d102      	bne.n	8000fc6 <_write_r+0x1e>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	b103      	cbz	r3, 8000fc6 <_write_r+0x1e>
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	2000009c 	.word	0x2000009c

08000fcc <_close_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d06      	ldr	r5, [pc, #24]	; (8000fe8 <_close_r+0x1c>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	602b      	str	r3, [r5, #0]
 8000fd8:	f7ff f98d 	bl	80002f6 <_close>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d102      	bne.n	8000fe6 <_close_r+0x1a>
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	b103      	cbz	r3, 8000fe6 <_close_r+0x1a>
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
 8000fe8:	2000009c 	.word	0x2000009c

08000fec <_fstat_r>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4d07      	ldr	r5, [pc, #28]	; (800100c <_fstat_r+0x20>)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	602b      	str	r3, [r5, #0]
 8000ffa:	f7ff f988 	bl	800030e <_fstat>
 8000ffe:	1c43      	adds	r3, r0, #1
 8001000:	d102      	bne.n	8001008 <_fstat_r+0x1c>
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	b103      	cbz	r3, 8001008 <_fstat_r+0x1c>
 8001006:	6023      	str	r3, [r4, #0]
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	bf00      	nop
 800100c:	2000009c 	.word	0x2000009c

08001010 <_isatty_r>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d06      	ldr	r5, [pc, #24]	; (800102c <_isatty_r+0x1c>)
 8001014:	2300      	movs	r3, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	602b      	str	r3, [r5, #0]
 800101c:	f7ff f987 	bl	800032e <_isatty>
 8001020:	1c43      	adds	r3, r0, #1
 8001022:	d102      	bne.n	800102a <_isatty_r+0x1a>
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	b103      	cbz	r3, 800102a <_isatty_r+0x1a>
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	bd38      	pop	{r3, r4, r5, pc}
 800102c:	2000009c 	.word	0x2000009c

08001030 <_lseek_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4d07      	ldr	r5, [pc, #28]	; (8001050 <_lseek_r+0x20>)
 8001034:	4604      	mov	r4, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	2200      	movs	r2, #0
 800103c:	602a      	str	r2, [r5, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	f7ff f980 	bl	8000344 <_lseek>
 8001044:	1c43      	adds	r3, r0, #1
 8001046:	d102      	bne.n	800104e <_lseek_r+0x1e>
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	b103      	cbz	r3, 800104e <_lseek_r+0x1e>
 800104c:	6023      	str	r3, [r4, #0]
 800104e:	bd38      	pop	{r3, r4, r5, pc}
 8001050:	2000009c 	.word	0x2000009c

08001054 <__malloc_lock>:
 8001054:	4801      	ldr	r0, [pc, #4]	; (800105c <__malloc_lock+0x8>)
 8001056:	f7ff be0b 	b.w	8000c70 <__retarget_lock_acquire_recursive>
 800105a:	bf00      	nop
 800105c:	20000090 	.word	0x20000090

08001060 <__malloc_unlock>:
 8001060:	4801      	ldr	r0, [pc, #4]	; (8001068 <__malloc_unlock+0x8>)
 8001062:	f7ff be06 	b.w	8000c72 <__retarget_lock_release_recursive>
 8001066:	bf00      	nop
 8001068:	20000090 	.word	0x20000090

0800106c <_read_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4d07      	ldr	r5, [pc, #28]	; (800108c <_read_r+0x20>)
 8001070:	4604      	mov	r4, r0
 8001072:	4608      	mov	r0, r1
 8001074:	4611      	mov	r1, r2
 8001076:	2200      	movs	r2, #0
 8001078:	602a      	str	r2, [r5, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	f7ff f902 	bl	8000284 <_read>
 8001080:	1c43      	adds	r3, r0, #1
 8001082:	d102      	bne.n	800108a <_read_r+0x1e>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	b103      	cbz	r3, 800108a <_read_r+0x1e>
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	2000009c 	.word	0x2000009c

08001090 <_init>:
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	bf00      	nop
 8001094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001096:	bc08      	pop	{r3}
 8001098:	469e      	mov	lr, r3
 800109a:	4770      	bx	lr

0800109c <_fini>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	bf00      	nop
 80010a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a2:	bc08      	pop	{r3}
 80010a4:	469e      	mov	lr, r3
 80010a6:	4770      	bx	lr
