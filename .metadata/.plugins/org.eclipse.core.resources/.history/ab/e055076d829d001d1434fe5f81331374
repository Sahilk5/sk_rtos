#include "timebase.h"
#include "stm32f4xx.h"

#define ONE_SEC_LOAD 16000000

#define CTRL_ENABLE (1U<<0)
#define CTRL_TICKINT (1U<<1)
#define CTRL_CLKSRC (1U<<2)
#define CTRL_COUNTFLAG (1U<<16)

#define MAX_DELAY 0xFFFFFFFFU

volatile uint32_t g_curr_tick;
volatile uint32_t tick_frq = 1;
volatile uint32_t g_curr_tick_p;

void delay(uint32_t delay){
	uint32_t tick_start = get_tick();
	uint32_t wait = delay;

	if(wait < MAX_DELAY) {
		wait += (uint32_t)(tick_frq);
	}

	while((get_tick() - tick_start) < wait);
}

void tick_increment(void) {
	g_curent_tick += tick_frq;
}

uint32_t get_tick() {
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
	__enable_irq();

	return g_curr_tick_p;
}

void timebase_init(void) {
	/* Reload the timer with no. of cycles per second*/
	SysTick->LOAD = ONE_SEC_LOAD - 1;
	/* Clear systick current value register */
	SysTick->VAL = 0;
	/* Select internal clock source */
	SysTick->CTRL = CTRL_CLKSRC;
	/* Enable interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
	/* Enable global interrupts */
	__enable_irq();
}

void SysTick_Handler(void) {
	tick_increment();
}
